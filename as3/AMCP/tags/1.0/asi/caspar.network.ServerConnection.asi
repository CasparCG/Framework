package caspar.network
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.TimerEvent;
	import flash.utils.Timer;
	import flash.errors.*;
	import flash.events.*;
	import flash.net.Socket;
	import flash.utils.Timer;
	import caspar.network.data.*;
	import caspar.network.ServerConnectionEvent;

	/**
	 * ...
	 * @author Andreas Jeansson, SVT
	 */
	public class ServerConnection extends EventDispatcher
	{
		private var _socket : CustomSocket;
		private var _autoReconnect : Boolean;
		private var _userForcedDisconnection : Boolean;
		private var _timer : Timer;

		public function get connected () : Boolean;

		public function ServerConnection ();

		/**
		 * Connects to a caspar server
		 * @param	server The server name
		 * @param	port The port number (default 5250)
		 */
		public function connect (server:String, port:uint=5250, autoReconnect:Boolean=true) : void;

		/**
		 * Disconnect from caspar server
		 */
		public function disconnect () : void;

		/**
		 * Sends a custom command via the AMCP protocol
		 * @param	command The commmand
		 * @return
		 */
		public function SendCommand (command:String) : String;

		/**
		 * Loads and prepares a clip for playout. Load stops any currently playing clip and displays the first frame of the new clip. Supply the LOOP parameter if you want the clip to loop.
		 * @param	channel The channel
		 * @param	file The file to load
		 * @param	loop Loop the clip (default: false)
		 */
		public function LoadMedia (channel:uint, file:String, loop:Boolean=false) : String;

		/**
		 * Loads and prepares a clip for playout in the background. It does not affect the currently playing clip in anyway. This is how you prepare a transition between to clips. Supply the LOOP parameter if you want the clip to loop.
		 * @param	channel The channel
		 * @param	file The file to load
		 * @param	loop Loop the clip (default: false)
		 * @param	transition The type of transition, use one of the transition contants in this class: ServerConnection.TRANSITION_CUT, ServerConnection.TRANSITION_MIX, ServerConnection.TRANSITION_PUSH, ServerConnection.TRANSITION_SLIDE, ServerConnection.TRANSITION_WIPE. (default: ServerConnection.TRANSITION_CUT)
		 * @param	duration The length of the transition in frames
		 * @param	direction Push, slide and wipe needs a direction, use one of the direction contants in this class: ServerConnection.DIRECTION_FROMLEFT and ServerConnection.DIRECTION_FROMRIGHT. (default: ServerConnection.DIRECTION_FROMLEFT)
		 * @param	border Push, slide and wipe can have a border. (filename / #aarrggbb).
		 * @param	borderWidth The width of the border if it’s not an image
		 */
		public function LoadMediaBG (channel:uint, file:String, loop:Boolean=false, transition:String=ServerConnection.TRANSITION_CUT, duration:int=0, direction:String=ServerConnection.DIRECTION_FROMLEFT, border:String="", borderWidth:int=0) : String;

		/**
		 * Starts the playout on a channel. If a transition is prepared it will execute and then the new clip will keep playing.
		 * @param	channel The channel
		 */
		public function PlayMedia (channel:uint) : String;

		/**
		 * Stops the playout on a channel. Nothing is done to prevent flickering if the channel is operating in a fields-based videomode.
		 * @param	channel The channel
		 */
		public function StopMedia (channel:uint) : String;

		/**
		 * Stops the playout if running and removes anything visible (by loading an transparent black frame). Please note that this DOES NOT AFFECT any template graphics that happens to be visible.
		 * @param	channel The channel
		 */
		public function ClearMedia (channel:uint) : String;

		/**
		 * Stores the dataset data under the name name.
		 * @param	name The name to store the data as
		 * @param	data XML data as defined in http://casparcg.com/wiki/CasparCG_1.8.0_AMCP_Protocol#Template_data
		 */
		public function StoreDataset (name:String, data:XML) : String;

		/**
		 * Returns the data saved under the name name. Will dispatch a ServerConnection.ON_DATARETRIEVE event if successfull otherwise a ServerConnection.ON_ERROR.
		 * @param	name The name of the data to retrieve
		 */
		public function GetData (name:String) : String;

		/**
		 * Returns a list of all saved datasets. Will dispatch a ServerConnection.ON_DATALIST event if successfull otherwise a ServerConnection.ON_ERROR.
		 */
		public function GetDatasets () : String;

		/**
		 * Prepares a template for displaying. It won’t show until you call CG PLAY (unless you supply the play-on-load flag, which is simply a ‘1’. ‘0’ for “don’t play on load”). data is either inline xml or a reference to a saved dataset.
		 * @param	channel The channel
		 * @param	layer The layer to add the template at
		 * @param	template the name of the template
		 * @param	playOnLoad Play the template automatically after loaded (default: false)
		 * @param	data The data to pass to the template, see http://casparcg.com/wiki/CasparCG_1.8.0_AMCP_Protocol#Format
		 */
		public function LoadTemplate (channel:uint, layer:int, template:String, playOnLoad:Boolean=false, data:*="") : String;

		/**
		 * Removes the visible template from a specific layer.
		 * @param	channel The channel
		 * @param	layer The layer to remove a template from
		 */
		public function RemoveTemplate (channel:uint, layer:int) : String;

		/**
		 * Clears all layers and any state that might be stored. What this actually does behind the scene is to create a new instance of the Adobe Flash player ActiveX controller in memory.
		 * @param	channel The channel
		 */
		public function ClearTemplates (channel:uint) : String;

		/**
		 * Plays / displays the template in the specified layer
		 * @param	channel The channel
		 * @param	layer The layer to play
		 */
		public function PlayTemplate (channel:uint, layer:int) : String;

		/**
		 * Stops and removes the template from the specified layer. This is different than REMOVE in that the template gets a chance to animate out when it is stopped.
		 * @param	channel The channel
		 * @param	layer The layer to stop
		 */
		public function StopTemplate (channel:uint, layer:int) : String;

		/**
		 * Triggers a ”continue” in the template on the specified layer. This is used to control animations that has multiple discreet steps.
		 * @param	channel The channel
		 * @param	layer The layer to perform the next command on
		 */
		public function Next (channel:uint, layer:int) : String;

		/**
		 * Jumps to the specified label in the template on the specified layer.
		 * @param	channel The channel
		 * @param	layer The layer to perform the goto command on
		 * @param	label The label to jump to
		 */
		public function GotoLabel (channel:uint, layer:int, label:String) : String;

		/**
		 * Sends new data to the template on specified layer. data is either inline xml or a reference to a saved dataset. (SetData)
		 * @param	channel The channel
		 * @param	layer The layer to update
		 * @param	data XML data or a reference to a saved dataset
		 */
		public function SetData (channel:uint, layer:int, data:*) : String;

		/**
		 * Calls a custom method in the document class of the template on the specified layer. The method must return void and take no parameters.
		 * @param	channel The channel
		 * @param	layer The layer to perform the invoke command on
		 * @param	method The method to call
		 */
		public function Invoke (channel:uint, layer:int, method:String) : String;

		/**
		 * Returns information about a mediafile
		 * @param	filename The name of the file
		 */
		public function GetMediaFileInfo (filename:String) : String;

		/**
		 * Lists all mediafiles
		 */
		public function GetMediaFiles () : String;

		/**
		 * Lists all templates. Lists only templates in the specified folder, if provided.
		 * @param	folder The folder to list (default: "")
		 */
		public function GetTemplates (folder:String="") : String;

		/**
		 * Returns the version of the server.
		 */
		public function GetVersion () : String;

		/**
		 * Returns information about the channels on the server. Use this without parameters to check how many channels a server has.
		 * @param	channel The channel (default: -1)
		 */
		public function GetInfo (channel:int=-1) : String;

		private function configureListeners () : void;

		private function dispatchAMCPEvent (e:ServerConnectionEvent) : void;

		private function unregisterListeners () : void;

		/**
		 * Is called when the socket is closed. If the closedown wasn't forced by the user, it tries to reconnect.
		 * @param	e ServerConnectionEvent
		 */
		private function onSocketClosed (e:ServerConnectionEvent) : void;

		/**
		 * Handle io errors from the socket and dispatch the event.
		 * @param	e ServerConnection
		 */
		private function ioErrorHandler (e:ServerConnectionEvent) : void;

		/**
		 * Handle security errors from the socket and dispatch the event
		 * @param	e ServerConnection
		 */
		private function securityErrorHandler (e:ServerConnectionEvent) : void;

		/**
		 * Will try reconnect till a connection is established
		 */
		private function reconnect () : void;

		/**
		 * Is Called on timerEvent.TIMER to check whether there is a socket connection or not. If not try to reconnect.
		 * @param	e TimerEvent
		 */
		private function onTimerReconnect (e:TimerEvent) : void;

		/**
		 * Connects to a caspar server
		 * @param	server The server name
		 * @param	port The port number (default 5250)
		 */
		private function doNewConnection (host:String, port:uint) : void;
	}
	private class CustomSocket extends Socket
	{
		private var _response : String;
		private var _commandQueue : Array;
		private var _host : String;
		private var _port : uint;
		private var totalSize : int;

		public function get host () : String;

		public function get port () : uint;

		public function CustomSocket ();

		public function connect (host:String, port:int) : void;

		public function close () : void;

		public function addCommand (command:Object) : void;

		private function nextCommand () : void;

		private function commandFinished () : void;

		private function configureListeners () : void;

		private function unregisterListeners () : void;

		private function writeln (str:String) : void;

		private function sendRequest (request:String) : void;

		private function readResponse () : void;

		private function dispatchEvents (response:String, command:String, type:String) : void;

		private function closeHandler (event:Event) : void;

		private function connectHandler (event:Event) : void;

		private function ioErrorHandler (event:IOErrorEvent) : void;

		private function securityErrorHandler (event:SecurityErrorEvent) : void;

		private function socketDataHandler (event:ProgressEvent) : void;
	}
}
